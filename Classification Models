def linear_svc(**kargs):
    # Getting values from kargs
    X_train = kargs.get("X_train")
    X_test = kargs.get("X_test")
    y_train = kargs.get("y_train")
    y_test = kargs.get("y_test")
    
    print("The suggested algorithm is Linear SVC...")
    print("Training your model...")
    # Creating and fitting the model
    clf = SVC(kernel='linear')
    clf.fit(X_train, y_train)
    
    # Using GridSearchCV to find optimum parameters
    params = {
                'C': [1, 10, 100, 1000],
                "gamma": [10, 1, 0.1, 0.001]
             }

    print(f"Optimizing your model using {params}")
    clf_grid= GridSearchCV(clf, params,cv=5)

    # Fit the grid search model to the train data
    clf_grid.fit(X_train,y_train)

    # Best estimator
    print(f"Best estimator: {clf_grid.best_estimator_}")
    print(f"Best parameters: {clf_grid.best_params_}")
    
    y_pred = clf_grid.best_estimator_.predict(X_test)
    
    return {"y_pred": y_pred,
            "y_test": y_test
           } 


def sgd_classifier(**kargs):
    # Getting values from kargs
    X_train = kargs.get("X_train")
    X_test = kargs.get("X_test")
    y_train = kargs.get("y_train")
    y_test = kargs.get("y_test")
    
    print("The suggested algorithm is SGD Classifier...")
    print("Training your model...")
    # Creating and fitting the model
    clf = SGDClassifier()
    #clf = SGDClassifier(max_iter=10000)
    clf.fit(X_train, y_train)
    
    # Using GridSearchCV to find optimum parameters
    params = {
                "loss" : ["hinge", "log_loss", "squared_hinge", "modified_huber", "perceptron"],
                "alpha" : [0.001, 0.01, 0.1, 1],
                "penalty" : ["l2", "l1", "elasticnet", "none"]
             }

    print(f"Optimizing your model using {params}")
    clf_grid= GridSearchCV(clf, params,cv=5)

    # Fit the grid search model to the train data
    clf_grid.fit(X_train,y_train)

    # Best estimator
    print(f"Best estimator: {clf_grid.best_estimator_}")
    print(f"Best parameters: {clf_grid.best_params_}")
    
    y_pred = clf_grid.best_estimator_.predict(X_test)
       
    return {"y_pred": y_pred,
            "y_test": y_test
           }


def knn_classifier(**kargs): 
    # Getting values from kargs
    X_train = kargs.get("X_train")
    X_test = kargs.get("X_test")
    y_train = kargs.get("y_train")
    y_test = kargs.get("y_test")
    
    print("The suggested algorithm is KNN Classifier...")
    print("Training your model...")
    # Creating and fitting the model
    clf = KNeighborsClassifier()
    clf.fit(X_train, y_train)
    
    # Using GridSearchCV to find optimum parameters
    params = { 'n_neighbors' : list(range(1,20)),
               'weights' : ['uniform','distance'],
               'metric' : ['minkowski','euclidean','manhattan']
             }

    print(f"Optimizing your model using {params}")
    clf_grid= GridSearchCV(clf, params,cv=5)

    # Fit the grid search model to the train data
    clf_grid.fit(X_train,y_train)

    # Best estimator
    print(f"Best estimator: {clf_grid.best_estimator_}")
    print(f"Best parameters: {clf_grid.best_params_}")
    
    y_pred = clf_grid.best_estimator_.predict(X_test)
    
    return {"y_pred": y_pred,
            "y_test": y_test
           } 


def svc(**kargs):
    # Getting values from kargs
    X_train = kargs.get("X_train")
    X_test = kargs.get("X_test")
    y_train = kargs.get("y_train")
    y_test = kargs.get("y_test")
    
    print("The suggested algorithm is SVC...")
    print("Training your model...")
    # Creating and fitting the model
    clf = SVC()
    clf.fit(X_train, y_train)
    
    # Using GridSearchCV to find optimum parameters
    params = {
                'C': [1, 10, 100, 1000],
                "gamma": [10, 1, 0.1, 0.001],
                "kernel": ['rbf', 'poly', 'sigmoid'],
             }

    print(f"Optimizing your model using {params}")
    clf_grid= GridSearchCV(clf, params,cv=5)

    # Fit the grid search model to the train data
    clf_grid.fit(X_train,y_train)

    # Best estimator
    print(f"Best estimator: {clf_grid.best_estimator_}")
    print(f"Best parameters: {clf_grid.best_params_}")
    
    y_pred = clf_grid.best_estimator_.predict(X_test)
    
    return {"y_pred": y_pred,
            "y_test": y_test
           }


def random_forest_classifier(**kargs):
    # Getting values from kargs
    X_train = kargs.get("X_train")
    X_test = kargs.get("X_test")
    y_train = kargs.get("y_train")
    y_test = kargs.get("y_test")
    
    print("The suggested algorithm is Random Forest Classifier...")
    print("Training your model...")
    # Creating and fitting the model
    clf = RandomForestClassifier()
    clf.fit(X_train, y_train)
    
    # Using GridSearchCV to find optimum parameters
    params = {'max_depth':[3,5,10,None],
              'n_estimators':[50,100,150, 200, 250],
              'max_features':['sqrt', 'log2', None],
              'criterion' :['gini', 'entropy']
           }

    print(f"Optimizing your model using {params}")
    clf_grid= GridSearchCV(clf, params,cv=5)

    # Fit the grid search model to the train data
    clf_grid.fit(X_train,y_train)

    # Best estimator
    print(f"Best estimator: {clf_grid.best_estimator_}")
    print(f"Best parameters: {clf_grid.best_params_}")
    
    y_pred = clf_grid.best_estimator_.predict(X_test)
    
    return {"y_pred": y_pred,
            "y_test": y_test
           } 


def naive_bayes(**kargs):
    # Getting values from kargs
    X_train = kargs.get("X_train")
    X_test = kargs.get("X_test")
    y_train = kargs.get("y_train")
    y_test = kargs.get("y_test")
    
    print("The suggested algorithm is Naive Bayes...")
    print("Training your model...")
    
    # Creating and fitting the model
    clf = MultinomialNB().fit(X_train, y_train)
    #y_score = clf.predict(X_test)
    #clf = GaussianNB()
    #clf.fit(X_train, y_train)
    
    # Using GridSearchCV to find optimum parameters
    params = {'alpha': [0.01, 0.1, 0.5, 1.0],
              #'fit_prior': [True, False],
              #'class_prior': [None, [0.1,]* len(n_classes), ]
             }

    print(f"Optimizing your model using {params}")
    clf_grid= GridSearchCV(clf, params,cv=5)

    # Fit the grid search model to the train data
    clf_grid.fit(X_train,y_train)

    # Best estimator
    print(f"Best estimator: {clf_grid.best_estimator_}")
    print(f"Best parameters: {clf_grid.best_params_}")
    
    y_pred = clf_grid.best_estimator_.predict(X_test)
    
    return {"y_pred": y_pred,
            "y_test": y_test
           }
